'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var rcUtil = require('rc-util');
var joinClasses = rcUtil.joinClasses;
var classSet = rcUtil.classSet;
var createChainedFunction = rcUtil.createChainedFunction;
var KeyCode = rcUtil.KeyCode;
var scrollIntoView = require('dom-scroll-into-view');

function noop() {}

var now = Date.now();

function getChildIndexInChildren(child, children) {
  var index = -1;
  React.Children.forEach(children, function (c, i) {
    if (c === child) {
      index = i;
    }
  });
  return index;
}

function getKeyFromChildren(child, children) {
  return child.key || 'rcMenuItem_' + now + '_' + getChildIndexInChildren(child, children);
}

function getActiveKey(props) {
  var activeKey = props.activeKey;
  var children = props.children;
  if (activeKey) {
    return activeKey;
  }
  React.Children.forEach(children, function (c) {
    if (c.props.active) {
      activeKey = getKeyFromChildren(c, children);
    }
  });
  if (!activeKey && props.activeFirst) {
    React.Children.forEach(children, function (c) {
      if (!activeKey && !c.props.disabled) {
        activeKey = getKeyFromChildren(c, children);
      }
    });
    return activeKey;
  }
  return activeKey;
}

function saveRef(name, c) {
  if (c) {
    this.instanceArray.push(c);
  }
}

var Menu = (function (_React$Component) {
  function Menu(props) {
    var _this = this;

    _classCallCheck(this, Menu);

    _get(Object.getPrototypeOf(Menu.prototype), 'constructor', this).call(this, props);
    this.state = {
      activeKey: getActiveKey.call(this, props),
      selectedKeys: props.selectedKeys || []
    };

    ['handleItemHover', 'handleDeselect', 'handleSelect', 'handleKeyDown', 'handleDestroy', 'renderMenuItem'].forEach(function (m) {
      _this[m] = _this[m].bind(_this);
    });
  }

  _inherits(Menu, _React$Component);

  _createClass(Menu, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var props = {
        activeKey: getActiveKey.call(this, nextProps)
      };
      if ('selectedKeys' in nextProps) {
        props.selectedKeys = nextProps.selectedKeys || [];
      }
      this.setState(props);
    }
  }, {
    key: 'handleKeyDown',

    // all keyboard events callbacks run from here at first
    value: function handleKeyDown(e) {
      var _this2 = this;

      var keyCode = e.keyCode;
      var handled;
      this.instanceArray.forEach(function (obj) {
        if (obj.props.active) {
          handled = obj.handleKeyDown(e);
        }
      });
      if (handled) {
        return 1;
      }
      var activeItem;
      switch (keyCode) {
        case KeyCode.UP:
          //up
          activeItem = this.step(-1);
          break;
        case KeyCode.DOWN:
          //down
          activeItem = this.step(1);
          break;
        default:
      }
      if (activeItem) {
        e.preventDefault();
        this.setState({
          activeKey: activeItem.props.eventKey
        }, function () {
          scrollIntoView(React.findDOMNode(activeItem), React.findDOMNode(_this2), {
            onlyScrollIfNeeded: true
          });
        });
        return 1;
      }
    }
  }, {
    key: 'step',
    value: function step(direction) {
      var children = this.instanceArray;
      var activeKey = this.state.activeKey;
      var len = children.length;
      if (direction < 0) {
        children = children.concat().reverse();
      }
      // find current activeIndex
      var activeIndex = -1;
      children.every(function (c, ci) {
        if (c.props.eventKey === activeKey) {
          activeIndex = ci;
          return false;
        }
        return true;
      });
      var start = (activeIndex + 1) % len;
      var i = start;
      for (;;) {
        var child = children[i];
        if (child.props.disabled) {
          i = (i + 1 + len) % len;
          // complete a loop
          if (i === start) {
            return null;
          }
        } else {
          return child;
        }
      }
    }
  }, {
    key: 'handleItemHover',
    value: function handleItemHover(key) {
      this.setState({
        activeKey: key
      });
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect(key, child, e) {
      var props = this.props;
      // not from submenu
      // top menu
      // TODO: remove sub judge
      if (!props.sub) {
        if (!props.multiple) {
          var selectedDescendant = this.selectedDescendant;
          if (selectedDescendant) {
            if (selectedDescendant !== child) {
              var selectedDescendantProps = selectedDescendant.props;
              selectedDescendantProps.onDeselect(selectedDescendantProps.eventKey, selectedDescendant, e, child);
            }
          }
          this.selectedDescendant = child;
        }
      }
      var state = this.state;
      // my child
      if (this.instanceArray.indexOf(child) !== -1) {
        var selectedKeys;
        if (props.multiple) {
          selectedKeys = state.selectedKeys.concat([key]);
        } else {
          selectedKeys = [key];
        }
        this.setState({
          selectedKeys: selectedKeys
        });
      }

      if (props.onSelect) {
        props.onSelect(key, child, e);
      }
    }
  }, {
    key: 'handleDeselect',
    value: function handleDeselect(key, child, e, __childToBeSelected /*internal*/) {
      var state = this.state;
      var children = this.instanceArray;
      // my children
      if (children.indexOf(child) !== -1 && children.indexOf(__childToBeSelected) === -1) {
        var selectedKeys = state.selectedKeys;
        var index = selectedKeys.indexOf(key);
        if (index !== -1) {
          selectedKeys = selectedKeys.concat([]);
          selectedKeys.splice(index, 1);
          this.setState({
            selectedKeys: selectedKeys
          });
        }
      }
      this.props.onDeselect.apply(null, arguments);
    }
  }, {
    key: 'handleDestroy',
    value: function handleDestroy(key) {
      var state = this.state;
      var selectedKeys = state.selectedKeys;
      var index = selectedKeys.indexOf(key);
      if (index !== -1) {
        //selectedKeys = selectedKeys.concat([]);
        selectedKeys.splice(index, 1);
        // can not call setState in unmount, will cause render and update unmounted children
        // https://github.com/facebook/react/pull/3795
        //this.setState({
        //  selectedKeys: selectedKeys
        //});
      }
    }
  }, {
    key: 'renderMenuItem',
    value: function renderMenuItem(child) {
      var state = this.state;
      var props = this.props;
      var key = getKeyFromChildren(child, props.children);
      var childProps = child.props;
      return React.cloneElement(child, {
        renderMenuItem: this.renderMenuItem,
        rootPrefixCls: props.prefixCls,
        ref: createChainedFunction(child.ref, saveRef.bind(this, key)),
        eventKey: key,
        onHover: this.handleItemHover,
        active: !childProps.disabled && key === state.activeKey,
        multiple: props.multiple,
        selected: state.selectedKeys.indexOf(key) !== -1,
        onClick: props.onClick,
        onDeselect: createChainedFunction(childProps.onDeselect, this.handleDeselect),
        onDestroy: this.handleDestroy,
        onSelect: createChainedFunction(childProps.onSelect, this.handleSelect)
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      this.instanceArray = [];
      var classes = {};
      classes[props.prefixCls] = true;
      var domProps = {
        className: joinClasses(props.className, classSet(classes)),
        role: 'menu',
        'aria-activedescendant': ''
      };
      if (props.id) {
        domProps.id = props.id;
      }
      if (props.focusable) {
        domProps.tabIndex = '0';
        domProps.onKeyDown = this.handleKeyDown;
      }
      return React.createElement(
        'ul',
        _extends({
          style: this.props.style
        }, domProps),
        React.Children.map(props.children, this.renderMenuItem)
      );
    }
  }]);

  return Menu;
})(React.Component);

Menu.propTypes = {
  focusable: React.PropTypes.bool,
  multiple: React.PropTypes.bool,
  onSelect: React.PropTypes.func,
  style: React.PropTypes.object,
  onDeselect: React.PropTypes.func,
  activeFirst: React.PropTypes.bool,
  activeKey: React.PropTypes.string,
  selectedKeys: React.PropTypes.arrayOf(React.PropTypes.string)
};

Menu.defaultProps = {
  prefixCls: 'rc-menu',
  focusable: true,
  style: {},
  onSelect: noop,
  onClick: noop,
  onDeselect: noop
};

module.exports = Menu;