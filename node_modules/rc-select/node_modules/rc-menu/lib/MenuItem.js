'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var React = require('react');
var rcUtil = require('rc-util');
var joinClasses = rcUtil.joinClasses;
var classSet = rcUtil.classSet;
var KeyCode = rcUtil.KeyCode;

var MenuItem = (function (_React$Component) {
  function MenuItem(props) {
    var _this = this;

    _classCallCheck(this, MenuItem);

    _get(Object.getPrototypeOf(MenuItem.prototype), 'constructor', this).call(this, props);
    ['handleKeyDown', 'handleMouseLeave', 'handleMouseEnter', 'handleClick'].forEach(function (m) {
      _this[m] = _this[m].bind(_this);
    });
  }

  _inherits(MenuItem, _React$Component);

  _createClass(MenuItem, [{
    key: '_getPrefixCls',
    value: function _getPrefixCls() {
      return this.props.rootPrefixCls + '-item';
    }
  }, {
    key: '_getActiveClassName',
    value: function _getActiveClassName() {
      return this._getPrefixCls() + '-active';
    }
  }, {
    key: '_getSelectedClassName',
    value: function _getSelectedClassName() {
      return this._getPrefixCls() + '-selected';
    }
  }, {
    key: '_getDisabledClassName',
    value: function _getDisabledClassName() {
      return this._getPrefixCls() + '-disabled';
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      var keyCode = e.keyCode;
      if (keyCode === KeyCode.ENTER) {
        this.handleClick(e);
        return true;
      }
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      this.props.onHover(null);
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      var props = this.props;
      props.onHover(props.eventKey);
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      var props = this.props;
      var eventKey = props.eventKey;
      props.onClick(eventKey, this, e);
      if (props.multiple) {
        if (props.selected) {
          props.onDeselect(eventKey, this, e);
        } else {
          props.onSelect(eventKey, this, e);
        }
      } else if (!props.selected) {
        props.onSelect(eventKey, this, e);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var props = this.props;
      if (props.onDestroy) {
        props.onDestroy(props.eventKey);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var classes = {};
      classes[this._getActiveClassName()] = !props.disabled && props.active;
      classes[this._getSelectedClassName()] = props.selected;
      classes[this._getDisabledClassName()] = props.disabled;
      classes[this._getPrefixCls()] = true;
      var attrs = {
        title: props.title,
        className: joinClasses(props.className, classSet(classes)),
        role: 'menuitem',
        'aria-selected': props.selected,
        'aria-disabled': props.disabled
      };
      var mouseEvent = {};
      if (!props.disabled) {
        mouseEvent = {
          onClick: this.handleClick,
          onMouseLeave: this.handleMouseLeave,
          onMouseEnter: this.handleMouseEnter
        };
      }
      return React.createElement(
        'li',
        _extends({}, attrs, mouseEvent),
        props.children
      );
    }
  }]);

  return MenuItem;
})(React.Component);

MenuItem.propTypes = {
  active: React.PropTypes.bool,
  selected: React.PropTypes.bool,
  disabled: React.PropTypes.bool,
  title: React.PropTypes.string,
  onSelect: React.PropTypes.func,
  onClick: React.PropTypes.func,
  onDeselect: React.PropTypes.func,
  onHover: React.PropTypes.func,
  onDestroy: React.PropTypes.func
};

MenuItem.defaultProps = {
  onSelect: function onSelect() {},
  onMouseEnter: function onMouseEnter() {}
};
module.exports = MenuItem;