'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcUtil = require('rc-util');

var _cssAnimation = require('css-animation');

var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

var _OptGroup = require('./OptGroup');

var _OptGroup2 = _interopRequireDefault(_OptGroup);

var _domAlign = require('dom-align');

var _domAlign2 = _interopRequireDefault(_domAlign);

var _Dropdown = require('./Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _util = require('./util');

function noop() {}

function filterFn(input, child) {
  return (0, _util.getPropValue)(child, this.props.optionFilterProp).indexOf(input) > -1;
}

function saveRef(name, component) {
  this[name] = component;
}

var Select = (function (_React$Component) {
  _inherits(Select, _React$Component);

  function Select(props) {
    var _this = this;

    _classCallCheck(this, Select);

    _get(Object.getPrototypeOf(Select.prototype), 'constructor', this).apply(this, arguments);
    var value = [];
    if ('value' in props) {
      value = (0, _util.normValue)(props.value);
    } else if ('defaultValue' in props) {
      value = (0, _util.normValue)(props.defaultValue);
    }
    this.state = {
      value: value,
      inputValue: ''
    };
    ['handleClick', 'handleKeyDown', 'handleInputKeyDown', 'handleInputChange', 'handleFocus', 'handleBlur', 'handleClearSelection', 'handleMenuSelect', 'handleMenuDeselect'].forEach(function (m) {
      _this[m] = _this[m].bind(_this);
    });
    this.saveInputRef = saveRef.bind(this, 'inputInstance');
    this.saveDropdownRef = saveRef.bind(this, 'dropdownInstance');
  }

  _createClass(Select, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: (0, _util.normValue)(nextProps.value)
        });
      }
    }
  }, {
    key: 'fireChange',
    value: function fireChange(value) {
      this.props.onChange((0, _util.isMultipleOrTags)(this.props) ? value : value[0]);
      this.setState({
        value: value
      });
    }
  }, {
    key: 'getLabelByValue',
    value: function getLabelByValue(children, value) {
      var _this2 = this;

      if (value === undefined) {
        return null;
      }
      var label = null;
      _react2['default'].Children.forEach(children, function (c) {
        if (c.type === _OptGroup2['default']) {
          var maybe = _this2.getLabelByValue(c.props.children, value);
          if (maybe != null) {
            label = maybe;
          }
        } else if ((0, _util.getValuePropValue)(c) === value) {
          label = (0, _util.getPropValue)(c, _this2.props.optionLabelProp);
        }
      });
      return label;
    }
  }, {
    key: 'setOpenState',
    value: function setOpenState(open) {
      var _this3 = this;

      var refs = this.refs;
      this.setState({
        open: open
      }, function () {
        if (open || (0, _util.isMultipleOrTagsOrCombobox)(_this3.props)) {
          if (_this3.getInputDOMNode()) {
            _this3.getInputDOMNode().focus();
          }
        } else if (refs.selection) {
          _react2['default'].findDOMNode(refs.selection).focus();
        }
      });
    }
  }, {
    key: 'handleInputChange',
    value: function handleInputChange(e) {
      var val = e.target.value;
      var props = this.props;
      this.setState({
        inputValue: val,
        open: true
      });
      if ((0, _util.isCombobox)(props)) {
        props.onChange(val);
      }
      props.onSearch(val);
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      if (!this.props.disabled) {
        if (this.state.open) {
          this.setOpenState(false);
        } else {
          this.openIfHasChildren();
        }
      }
    }
  }, {
    key: 'openIfHasChildren',
    value: function openIfHasChildren() {
      var props = this.props;
      if (_react2['default'].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
        this.setOpenState(true);
      }
    }
  }, {
    key: 'handleKeyDown',

    // combobox ignore
    value: function handleKeyDown(e) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      var keyCode = e.keyCode;
      if (this.state.open && !this.getInputDOMNode()) {
        this.handleInputKeyDown(e);
      } else if (keyCode === _rcUtil.KeyCode.ENTER || keyCode === _rcUtil.KeyCode.DOWN) {
        this.handleClick();
        e.preventDefault();
      }
    }
  }, {
    key: 'handleInputKeyDown',
    value: function handleInputKeyDown(e) {
      var props = this.props;
      var state = this.state;
      var keyCode = e.keyCode;
      if ((0, _util.isMultipleOrTags)(props) && !e.target.value && keyCode === _rcUtil.KeyCode.BACKSPACE) {
        var value = state.value.concat();
        if (value.length) {
          value.pop();
          this.fireChange(value);
        }
        return;
      }

      if (keyCode === _rcUtil.KeyCode.DOWN) {
        if (!state.open) {
          this.openIfHasChildren();
          e.preventDefault();
          e.stopPropagation();
          return;
        }
      } else if (keyCode === _rcUtil.KeyCode.ESC) {
        if (state.open) {
          this.setOpenState(false);
          e.preventDefault();
          e.stopPropagation();
        }
        return;
      }

      if (state.open) {
        var menu = this.dropdownInstance && this.dropdownInstance.refs.menu;
        if (menu && menu.handleKeyDown(e)) {
          e.preventDefault();
          e.stopPropagation();
        }
      }
    }
  }, {
    key: 'handleMenuSelect',
    value: function handleMenuSelect(key, item) {
      var value = this.state.value;
      var props = this.props;
      var selectedValue = (0, _util.getValuePropValue)(item);
      if (value.indexOf(selectedValue) !== -1) {
        return;
      }
      if ((0, _util.isMultipleOrTags)(props)) {
        value = value.concat([selectedValue]);
      } else {
        if (value[0] === selectedValue) {
          this.setOpenState(false);
          return;
        }
        value = [selectedValue];
      }
      props.onSelect(selectedValue, item);
      this.fireChange(value);
      this.setState({
        inputValue: ''
      });
      this.setOpenState(false);
      if ((0, _util.isCombobox)(props)) {
        this.setState({
          inputValue: (0, _util.getPropValue)(item, props.optionLabelProp)
        });
      }
    }
  }, {
    key: 'handleMenuDeselect',
    value: function handleMenuDeselect(key, item, e) {
      if (e.type === 'click') {
        this.removeSelected((0, _util.getValuePropValue)(item));
      }
      this.setState({
        inputValue: ''
      });
      this.setOpenState(false);
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      var _this4 = this;

      if (this._blurTimer) {
        clearTimeout(this._blurTimer);
      }
      this._blurTimer = setTimeout(function () {
        _this4.setState({
          open: false
        });
      }, 100);
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      if (this._blurTimer) {
        clearTimeout(this._blurTimer);
        this._blurTimer = null;
      }
    }
  }, {
    key: 'removeSelected',
    value: function removeSelected(selectedValue) {
      var props = this.props;
      if (props.disabled) {
        return;
      }
      var value = this.state.value.filter(function (v) {
        return v !== selectedValue;
      });
      var canMultiple = (0, _util.isMultipleOrTags)(props);
      if (canMultiple) {
        props.onDeselect(selectedValue);
      }
      this.fireChange(value);
    }
  }, {
    key: 'handleClearSelection',
    value: function handleClearSelection(e) {
      var props = this.props;
      var state = this.state;
      if (props.disabled) {
        return;
      }
      e.stopPropagation();
      if (state.inputValue || state.value.length) {
        this.fireChange([]);
        this.setState({
          inputValue: ''
        });
      }
      this.setOpenState(false);
    }
  }, {
    key: 'renderTopControlNode',
    value: function renderTopControlNode() {
      var _this5 = this;

      var value = this.state.value;
      var props = this.props;
      var prefixCls = props.prefixCls;
      var allowClear = props.allowClear;
      var children = props.children;
      var clear = _react2['default'].createElement(
        'span',
        { className: prefixCls + '-selection__clear',
          onClick: this.handleClearSelection },
        '×'
      );
      // single and not combobox, input is inside dropdown
      if ((0, _util.isSingleMode)(props)) {
        return _react2['default'].createElement(
          'span',
          { className: prefixCls + '-selection__rendered' },
          _react2['default'].createElement(
            'span',
            null,
            this.getLabelByValue(children, value[0]) || props.placeholder
          ),
          allowClear ? clear : null
        );
      } else {
        var selectedValueNodes;
        if ((0, _util.isMultipleOrTags)(props)) {
          selectedValueNodes = value.map(function (v) {
            var content = _this5.getLabelByValue(children, v) || v;
            var title = content;
            var maxTagTextLength = props.maxTagTextLength;
            if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
              content = content.slice(0, maxTagTextLength) + '...';
            }
            return _react2['default'].createElement(
              'li',
              { className: prefixCls + '-selection__choice',
                key: v,
                title: title },
              _react2['default'].createElement(
                'span',
                { className: prefixCls + '-selection__choice__content' },
                content
              ),
              _react2['default'].createElement('span', { className: prefixCls + '-selection__choice__remove',
                onClick: _this5.removeSelected.bind(_this5, v) })
            );
          });
        }
        return _react2['default'].createElement(
          'ul',
          { className: prefixCls + '-selection__rendered' },
          selectedValueNodes,
          allowClear && !(0, _util.isMultipleOrTags)(props) ? clear : null,
          _react2['default'].createElement(
            'li',
            { className: (0, _rcUtil.joinClasses)(prefixCls + '-search', prefixCls + '-search--inline') },
            this.getInputElement()
          )
        );
      }
    }
  }, {
    key: 'getDropdownDOMNode',
    value: function getDropdownDOMNode() {
      return _react2['default'].findDOMNode(this.dropdownInstance);
    }
  }, {
    key: 'getDropdownContainer',
    value: function getDropdownContainer() {
      if (!this.dropdownContainer) {
        this.dropdownContainer = document.createElement('div');
        document.body.appendChild(this.dropdownContainer);
      }
      return this.dropdownContainer;
    }
  }, {
    key: 'renderDropdown',
    value: function renderDropdown(prevState) {
      var state = this.state;
      var props = this.props;
      var dropdownDOMNode;
      if (state.open && props.renderDropdownToBody) {
        _react2['default'].render(this.getDropdownElement(), this.getDropdownContainer());
      }
      if (this.dropdownContainer) {
        this.dropdownContainer.className = this.props.prefixCls + '-dropdown-container' + (state.open ? '-open' : '');
      }
      if (props.dropdownMatchSelectWidth && state.open) {
        dropdownDOMNode = this.getDropdownDOMNode();
        if (dropdownDOMNode) {
          dropdownDOMNode.style.width = _react2['default'].findDOMNode(this).offsetWidth + 'px';
        }
      }
      if (!prevState.open && state.open) {
        dropdownDOMNode = this.getDropdownDOMNode();
        if (dropdownDOMNode) {
          (0, _domAlign2['default'])(dropdownDOMNode, _react2['default'].findDOMNode(this), {
            points: ['tl', 'bl'],
            offset: [0, 4]
          });
        }
      }
    }
  }, {
    key: 'getInputElement',
    value: function getInputElement() {
      var props = this.props;
      return _react2['default'].createElement('input', { ref: this.saveInputRef,
        onChange: this.handleInputChange,
        onKeyDown: this.handleInputKeyDown,
        value: this.state.inputValue,
        disabled: props.disabled,
        placeholder: props.searchPlaceholder,
        className: props.prefixCls + '-search__field',
        role: 'textbox' });
    }
  }, {
    key: 'getDropdownElement',
    value: function getDropdownElement() {
      var state = this.state;
      var props = this.props;
      if (state.open) {
        this.cachedDropDown = _react2['default'].createElement(
          _Dropdown2['default'],
          {
            key: 'dropdown',
            onDropdownFocus: this.handleFocus,
            onDropdownBlur: this.handleBlur,
            filterOption: props.filterOption,
            optionFilterProp: props.optionFilterProp,
            optionLabelProp: props.optionLabelProp,
            inputValue: state.inputValue,
            inputElement: this.getInputElement(),
            ref: this.saveDropdownRef,
            tags: props.tags,
            notFoundContent: props.notFoundContent,
            onMenuDeselect: this.handleMenuDeselect,
            onMenuSelect: this.handleMenuSelect,
            value: state.value,
            isMultipleOrTags: (0, _util.isMultipleOrTags)(props),
            prefixCls: props.prefixCls,
            isMultipleOrTagsOrCombobox: (0, _util.isMultipleOrTagsOrCombobox)(props),
            showSearch: props.showSearch,
            dropdownMenuStyle: props.dropdownMenuStyle,
            dropdownStyle: props.dropdownStyle },
          props.children
        );
      }
      return this.cachedDropDown;
    }
  }, {
    key: 'animateDropdown',
    value: function animateDropdown(prevProps, prevState) {
      var props = this.props;
      var state = this.state;
      var transitionName = props.transitionName;
      if (!transitionName && props.animation) {
        transitionName = props.prefixCls + '-dropdown-' + props.animation;
      }
      var domNode = this.getDropdownDOMNode();
      if (transitionName && domNode) {
        if (state.open && !prevState.open) {
          (0, _cssAnimation2['default'])(domNode, transitionName + '-enter');
        } else if (!state.open && prevState.open) {
          (0, _cssAnimation2['default'])(domNode, transitionName + '-leave');
        }
      }
    }
  }, {
    key: 'getInputDOMNode',
    value: function getInputDOMNode() {
      return _react2['default'].findDOMNode(this.inputInstance);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.componentDidUpdate();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      prevState = prevState || {};
      this.renderDropdown(prevState);
      this.animateDropdown(prevProps, prevState);
      if ((0, _util.isMultipleOrTags)(this.props)) {
        var inputNode = this.getInputDOMNode();
        if (inputNode.value) {
          inputNode.style.width = '';
          inputNode.style.width = inputNode.scrollWidth + 'px';
        } else {
          inputNode.style.width = '';
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.dropdownContainer) {
        _react2['default'].unmountComponentAtNode(this.dropdownContainer);
        document.body.removeChild(this.dropdownContainer);
        this.dropdownContainer = null;
      }
      this.dropdownInstance = null;
      if (this._blurTimer) {
        clearTimeout(this._blurTimer);
        this._blurTimer = null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _rootCls;

      var props = this.props;
      var multiple = (0, _util.isMultipleOrTags)(props);
      var state = this.state;
      var prefixCls = props.prefixCls;
      var ctrlNode = this.renderTopControlNode();
      var extraSelectionProps = {};
      if (!(0, _util.isCombobox)(props)) {
        extraSelectionProps = {
          onKeyDown: this.handleKeyDown,
          tabIndex: 0
        };
      }
      var rootCls = (_rootCls = {}, _defineProperty(_rootCls, prefixCls, true), _defineProperty(_rootCls, prefixCls + '-open', this.state.open), _defineProperty(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), _defineProperty(_rootCls, prefixCls + '-disabled', props.disabled), _rootCls);
      return _react2['default'].createElement(
        'span',
        {
          style: props.style,
          className: (0, _rcUtil.joinClasses)(props.className, (0, _rcUtil.classSet)(rootCls)),
          onFocus: this.handleFocus,
          onBlur: this.handleBlur },
        _react2['default'].createElement(
          'span',
          _extends({ ref: 'selection',
            key: 'selection',
            className: (0, _rcUtil.joinClasses)(prefixCls + '-selection', prefixCls + '-selection--' + (multiple ? 'multiple' : 'single')),
            role: 'combobox',
            'aria-autocomplete': 'list',
            onClick: this.handleClick,
            'aria-haspopup': 'true',
            'aria-expanded': state.open
          }, extraSelectionProps),
          ctrlNode,
          multiple || !props.showArrow ? null : _react2['default'].createElement(
            'span',
            { key: 'arrow', className: prefixCls + '-arrow', tabIndex: '-1', style: { outline: 'none' } },
            _react2['default'].createElement('b', null)
          )
        ),
        props.renderDropdownToBody ? null : this.getDropdownElement()
      );
    }
  }]);

  return Select;
})(_react2['default'].Component);

exports['default'] = Select;

Select.propTypes = {
  multiple: _react2['default'].PropTypes.bool,
  filterOption: _react2['default'].PropTypes.any,
  showSearch: _react2['default'].PropTypes.bool,
  showArrow: _react2['default'].PropTypes.bool,
  renderDropdownToBody: _react2['default'].PropTypes.bool,
  tags: _react2['default'].PropTypes.bool,
  transitionName: _react2['default'].PropTypes.string,
  optionLabelProp: _react2['default'].PropTypes.string,
  optionFilterProp: _react2['default'].PropTypes.string,
  animation: _react2['default'].PropTypes.string,
  onChange: _react2['default'].PropTypes.func,
  onSelect: _react2['default'].PropTypes.func,
  onSearch: _react2['default'].PropTypes.func,
  searchPlaceholder: _react2['default'].PropTypes.string,
  placeholder: _react2['default'].PropTypes.any,
  onDeselect: _react2['default'].PropTypes.func,
  dropdownStyle: _react2['default'].PropTypes.object,
  maxTagTextLength: _react2['default'].PropTypes.number
};

Select.defaultProps = {
  prefixCls: 'rc-select',
  filterOption: filterFn,
  showSearch: true,
  allowClear: false,
  placeholder: '',
  searchPlaceholder: '',
  onChange: noop,
  onSelect: noop,
  onSearch: noop,
  onDeselect: noop,
  showArrow: true,
  dropdownMatchSelectWidth: true,
  dropdownStyle: {},
  dropdownMenuStyle: {},
  renderDropdownToBody: false,
  optionFilterProp: 'value',
  optionLabelProp: 'value',
  notFoundContent: 'Not Found'
};
module.exports = exports['default'];